#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QFileDialog>
#include <QMessageBox>
#include <QTableView>
#include <QAbstractItemView>
#include <QStandardItemModel>
#include <QToolBar>
#include <QInputDialog>
#include <QDate>
#include <QIcon>
#include <QStatusBar>
#include <QFileInfo>
#include <QHeaderView>
#include <QScrollArea>
#include <QDockWidget>
#include <QLineEdit>
#include <QPushButton>
#include <QHBoxLayout>
#include <QSet>
#include <QDateTime>
#include <QMenuBar>
#include <QMenu>
#include <QAction>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
    , adminMode_(false)
    , currentUser_("")
    , searchEdit_(nullptr)
    , searchButton_(nullptr)
    , isDarkMode_(false)
    , themeToggleButton_(nullptr)
{
    ui->setupUi(this);
    setupTable();
    setupMenuBar();
    setupActions();
    setupSearchBar();
    setupThemeToggle();
    initializeSampleBooks();
    setupStyles();
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::setupTable()
{
    model_ = new QStandardItemModel(this);
    model_->setHorizontalHeaderLabels({
        QStringLiteral("Á¥¢ÂºïÂè∑"), QStringLiteral("ÂêçÁß∞"), QStringLiteral("È¶ÜËóèÂú∞ÂùÄ"),
        QStringLiteral("Á±ªÂà´"), QStringLiteral("Êï∞Èáè"), QStringLiteral("‰ª∑Ê†º"),
        QStringLiteral("ÂÖ•Â∫ìÊó•Êúü"), QStringLiteral("ÂΩíËøòÊó•Êúü"), QStringLiteral("ÂÄüÈòÖÊ¨°Êï∞"),
        QStringLiteral("Áä∂ÊÄÅ")
    });
    
    // ÂàõÂª∫Ë°®Ê†ºËßÜÂõæ
    tableView_ = new QTableView(this);
    tableView_->setModel(model_);
    tableView_->setSelectionBehavior(QAbstractItemView::SelectRows);
    tableView_->setEditTriggers(QAbstractItemView::NoEditTriggers);
    
    // ËÆæÁΩÆË°®Ê†ºËá™ÈÄÇÂ∫îÂàóÂÆΩ
    tableView_->horizontalHeader()->setStretchLastSection(true);
    tableView_->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    tableView_->horizontalHeader()->setSectionResizeMode(1, QHeaderView::Stretch); // ÂêçÁß∞ÂàóËá™ÈÄÇÂ∫î
    tableView_->horizontalHeader()->setSectionResizeMode(2, QHeaderView::Stretch); // È¶ÜËóèÂú∞ÂùÄÂàóËá™ÈÄÇÂ∫î
    
    // ËÆæÁΩÆË°®Ê†ºËá™ÈÄÇÂ∫îË°åÈ´ò
    tableView_->verticalHeader()->setDefaultSectionSize(40);
    tableView_->verticalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    
    // ËÆæÁΩÆË°®Ê†ºÂü∫Êú¨Â±ûÊÄß
    tableView_->setAlternatingRowColors(true);
    
    // Â∞ÜË°®Ê†ºÊ∑ªÂä†Âà∞‰∏≠Â§ÆÂ∏ÉÂ±Ä
    ui->centralLayout->addWidget(tableView_);
}

void MainWindow::refreshTable(const QVector<Book> &books)
{
    model_->removeRows(0, model_->rowCount());
    model_->setRowCount(books.size());
    for (int row = 0; row < books.size(); ++row) {
        const Book &b = books[row];
        model_->setItem(row, 0, new QStandardItem(b.indexId));
        model_->setItem(row, 1, new QStandardItem(b.name));
        model_->setItem(row, 2, new QStandardItem(b.location));
        model_->setItem(row, 3, new QStandardItem(b.category));
        model_->setItem(row, 4, new QStandardItem(QString::number(b.quantity)));
        model_->setItem(row, 5, new QStandardItem(QString::number(b.price, 'f', 2)));
        model_->setItem(row, 6, new QStandardItem(b.inDate.isValid() ? b.inDate.toString(Qt::ISODate) : QString()));
        model_->setItem(row, 7, new QStandardItem(b.returnDate.isValid() ? b.returnDate.toString(Qt::ISODate) : QString()));
        model_->setItem(row, 8, new QStandardItem(QString::number(b.borrowCount)));
        model_->setItem(row, 9, new QStandardItem(b.available ? QStringLiteral("‚úÖ ÂèØÂÄü") : QStringLiteral("‚ùå ‰∏çÂèØÂÄü")));
    }
    
    // Êõ¥Êñ∞Áä∂ÊÄÅÊ†è‰ø°ÊÅØ
    int totalBooks = books.size();
    int availableBooks = 0;
    int borrowedBooks = 0;
    for (const auto &book : books) {
        if (book.available) {
            availableBooks++;
        } else {
            borrowedBooks++;
        }
    }
    
    QString statusText = QStringLiteral("üìä ÊÄªËÆ°: %1 Êú¨Âõæ‰π¶ | ‚úÖ ÂèØÂÄü: %2 Êú¨ | ‚ùå Â∑≤ÂÄüÂá∫: %3 Êú¨")
                        .arg(totalBooks).arg(availableBooks).arg(borrowedBooks);
    statusBar()->showMessage(statusText);
}

void MainWindow::setupActions()
{
    // ÂàõÂª∫Â∑¶‰æßÂ∑•ÂÖ∑Ê†è
    auto *bar = addToolBar(QStringLiteral("Êìç‰Ωú"));
    bar->setMovable(false);
    bar->setFloatable(false);
    bar->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);
    bar->setOrientation(Qt::Vertical);  // ËÆæÁΩÆ‰∏∫ÂûÇÁõ¥ÊñπÂêë
    bar->setAllowedAreas(Qt::LeftToolBarArea);  // ÈôêÂà∂Âú®Â∑¶‰æß
    
    // ÂàõÂª∫ÊªöÂä®Âå∫ÂüüÊù•ÂåÖË£ÖÂ∑•ÂÖ∑Ê†è
    QScrollArea *scrollArea = new QScrollArea();
    scrollArea->setWidget(bar);
    scrollArea->setWidgetResizable(true);
    scrollArea->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    scrollArea->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    scrollArea->setMaximumWidth(180);  // ÈôêÂà∂ÊúÄÂ§ßÂÆΩÂ∫¶
    scrollArea->setMinimumWidth(130);  // ËÆæÁΩÆÊúÄÂ∞èÂÆΩÂ∫¶
    
    // ÊªöÂä®Âå∫ÂüüÊ†∑ÂºèÁî±‰∏ªÈ¢òÁ≥ªÁªüÊéßÂà∂
    
    // Â∞ÜÊªöÂä®Âå∫ÂüüÊ∑ªÂä†Âà∞Â∑¶‰æßÂÅúÈù†Âå∫Âüü
    addDockWidget(Qt::LeftDockWidgetArea, createDockWidgetFromScrollArea(scrollArea));
    
    // ‰ΩøÁî®UnicodeÂõæÊ†áÁæéÂåñÂ∑•ÂÖ∑Ê†èÊåâÈíÆ
    auto addAct = bar->addAction(QStringLiteral("üìö Êñ∞Â¢û"));
    auto editAct = bar->addAction(QStringLiteral("‚úèÔ∏è ÁºñËæë"));
    auto delAct = bar->addAction(QStringLiteral("üóëÔ∏è Âà†Èô§"));
    bar->addSeparator();
    auto borrowAct = bar->addAction(QStringLiteral("üìñ ÂÄü‰π¶"));
    auto returnAct = bar->addAction(QStringLiteral("üì§ Ëøò‰π¶"));
    bar->addSeparator();
    auto dueAct = bar->addAction(QStringLiteral("‚è∞ Âà∞Êúü(3Â§©ÂÜÖ)"));
    auto sortAct = bar->addAction(QStringLiteral("üìä ÊåâÂÄüÈòÖÊ¨°Êï∞ÊéíÂ∫è"));
    bar->addSeparator();
    auto openAct = bar->addAction(QStringLiteral("üìÇ ÊâìÂºÄ"));
    auto saveAct = bar->addAction(QStringLiteral("üíæ ‰øùÂ≠ò"));
    auto allAct = bar->addAction(QStringLiteral("üìã ÊòæÁ§∫ÂÖ®ÈÉ®"));
    bar->addSeparator();
    auto switchAct = bar->addAction(QStringLiteral("üîÑ ÂàáÊç¢Ê®°Âºè"));
    
    // Êñ∞Â¢ûÂÆûÁî®ÂäüËÉΩÊåâÈíÆ
    bar->addSeparator();
    auto filterCategoryAct = bar->addAction(QStringLiteral("üìÇ ÊåâÂàÜÁ±ªÁ≠õÈÄâ"));
    auto filterLocationAct = bar->addAction(QStringLiteral("üìç Êåâ‰ΩçÁΩÆÁ≠õÈÄâ"));
    auto availableAct = bar->addAction(QStringLiteral("‚úÖ ÂèØÂÄüÂõæ‰π¶"));
    auto borrowedAct = bar->addAction(QStringLiteral("üìñ Â∑≤ÂÄüÂõæ‰π¶"));
    auto topBorrowedAct = bar->addAction(QStringLiteral("üî• ÁÉ≠Èó®Âõæ‰π¶"));
    auto recentAct = bar->addAction(QStringLiteral("üÜï ÊúÄÊñ∞Âõæ‰π¶"));
    auto expensiveAct = bar->addAction(QStringLiteral("üí∞ È´ò‰ª∑Âõæ‰π¶"));
    auto cheapAct = bar->addAction(QStringLiteral("üí∏ ‰Ωé‰ª∑Âõæ‰π¶"));
    auto statisticsAct = bar->addAction(QStringLiteral("üìä ÁªüËÆ°‰ø°ÊÅØ"));
    
    bar->addSeparator();
    auto sortNameAct = bar->addAction(QStringLiteral("üî§ ÊåâÂêçÁß∞ÊéíÂ∫è"));
    auto sortCategoryAct = bar->addAction(QStringLiteral("üìö ÊåâÂàÜÁ±ªÊéíÂ∫è"));
    auto sortLocationAct = bar->addAction(QStringLiteral("üìç Êåâ‰ΩçÁΩÆÊéíÂ∫è"));
    auto sortPriceAct = bar->addAction(QStringLiteral("üíµ Êåâ‰ª∑Ê†ºÊéíÂ∫è"));
    auto sortDateAct = bar->addAction(QStringLiteral("üìÖ ÊåâÊó•ÊúüÊéíÂ∫è"));
    auto sortBorrowAct = bar->addAction(QStringLiteral("üìà ÊåâÂÄüÈòÖÊéíÂ∫è"));
    
    bar->addSeparator();
    auto advancedSearchAct = bar->addAction(QStringLiteral("üîç È´òÁ∫ßÊêúÁ¥¢"));
    auto exportAct = bar->addAction(QStringLiteral("üì§ ÂØºÂá∫Êï∞ÊçÆ"));
    auto importAct = bar->addAction(QStringLiteral("üì• ÂØºÂÖ•Êï∞ÊçÆ"));
    auto backupAct = bar->addAction(QStringLiteral("üíæ Â§á‰ªΩÊï∞ÊçÆ"));
    auto restoreAct = bar->addAction(QStringLiteral("üîÑ ÊÅ¢Â§çÊï∞ÊçÆ"));

    connect(addAct, &QAction::triggered, this, &MainWindow::onAdd);
    connect(editAct, &QAction::triggered, this, &MainWindow::onEdit);
    connect(delAct, &QAction::triggered, this, &MainWindow::onRemove);
    connect(borrowAct, &QAction::triggered, this, &MainWindow::onBorrow);
    connect(returnAct, &QAction::triggered, this, &MainWindow::onReturn);
    connect(dueAct, &QAction::triggered, this, &MainWindow::onShowDue);
    connect(sortAct, &QAction::triggered, this, &MainWindow::onSortByBorrow);
    connect(openAct, &QAction::triggered, this, &MainWindow::onOpen);
    connect(saveAct, &QAction::triggered, this, &MainWindow::onSave);
    connect(allAct, &QAction::triggered, this, &MainWindow::onShowAll);
    connect(switchAct, &QAction::triggered, this, &MainWindow::onSwitchMode);
    
    // ËøûÊé•Êñ∞Â¢ûÂäüËÉΩ
    connect(filterCategoryAct, &QAction::triggered, this, &MainWindow::onFilterByCategory);
    connect(filterLocationAct, &QAction::triggered, this, &MainWindow::onFilterByLocation);
    connect(availableAct, &QAction::triggered, this, &MainWindow::onShowAvailable);
    connect(borrowedAct, &QAction::triggered, this, &MainWindow::onShowBorrowed);
    connect(topBorrowedAct, &QAction::triggered, this, &MainWindow::onShowTopBorrowed);
    connect(recentAct, &QAction::triggered, this, &MainWindow::onShowRecentlyAdded);
    connect(expensiveAct, &QAction::triggered, this, &MainWindow::onShowExpensiveBooks);
    connect(cheapAct, &QAction::triggered, this, &MainWindow::onShowCheapBooks);
    connect(statisticsAct, &QAction::triggered, this, &MainWindow::onShowStatistics);
    connect(sortNameAct, &QAction::triggered, this, &MainWindow::onSortByName);
    connect(sortCategoryAct, &QAction::triggered, this, &MainWindow::onSortByCategory);
    connect(sortLocationAct, &QAction::triggered, this, &MainWindow::onSortByLocation);
    connect(sortPriceAct, &QAction::triggered, this, &MainWindow::onSortByPrice);
    connect(sortDateAct, &QAction::triggered, this, &MainWindow::onSortByDate);
    connect(sortBorrowAct, &QAction::triggered, this, &MainWindow::onSortByBorrowCount);
    connect(advancedSearchAct, &QAction::triggered, this, &MainWindow::onAdvancedSearch);
    connect(exportAct, &QAction::triggered, this, &MainWindow::onExportData);
    connect(importAct, &QAction::triggered, this, &MainWindow::onImportData);
    connect(backupAct, &QAction::triggered, this, &MainWindow::onBackupData);
    connect(restoreAct, &QAction::triggered, this, &MainWindow::onRestoreData);
}

void MainWindow::onAdd()
{
    // Ê£ÄÊü•ÊùÉÈôê
    if (!adminMode_) {
        QMessageBox::warning(this, QStringLiteral("‚ùå ÊùÉÈôê‰∏çË∂≥"), QStringLiteral("ËØªËÄÖÊ®°ÂºèÊó†Ê≥ïÊ∑ªÂä†Âõæ‰π¶ÔºåËØ∑ÂàáÊç¢Âà∞ÁÆ°ÁêÜÂëòÊ®°Âºè"));
        return;
    }
    
    BookDialog dlg(this);
    if (dlg.exec() == QDialog::Accepted) {
        QString err;
        Book b = dlg.getBook();
        if (!library_.addBook(b, &err)) {
            QMessageBox::warning(this, QStringLiteral("‚ùå Êñ∞Â¢ûÂ§±Ë¥•"), err);
            return;
        }
        refreshTable(library_.getAll());
        statusBar()->showMessage(QStringLiteral("‚úÖ ÊàêÂäüÊ∑ªÂä†Âõæ‰π¶: %1").arg(b.name), 3000);
    }
}

void MainWindow::onEdit()
{
    // Ê£ÄÊü•ÊùÉÈôê
    if (!adminMode_) {
        QMessageBox::warning(this, QStringLiteral("‚ùå ÊùÉÈôê‰∏çË∂≥"), QStringLiteral("ËØªËÄÖÊ®°ÂºèÊó†Ê≥ïÁºñËæëÂõæ‰π¶ÔºåËØ∑ÂàáÊç¢Âà∞ÁÆ°ÁêÜÂëòÊ®°Âºè"));
        return;
    }
    
    if (!tableView_) return;
    const auto idx = tableView_->currentIndex();
    if (!idx.isValid()) {
        QMessageBox::information(this, QStringLiteral("‚ÑπÔ∏è ÊèêÁ§∫"), QStringLiteral("ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÁºñËæëÁöÑÂõæ‰π¶"));
        return;
    }
    const QString indexId = model_->item(idx.row(), 0)->text();
    const auto all = library_.getAll();
    int pos = -1;
    for (int i = 0; i < all.size(); ++i) if (all[i].indexId == indexId) { pos = i; break; }
    if (pos < 0) return;
    BookDialog dlg(this);
    dlg.setBook(all[pos]);
    if (dlg.exec() == QDialog::Accepted) {
        QString err;
        if (!library_.updateBook(indexId, dlg.getBook(), &err)) {
            QMessageBox::warning(this, QStringLiteral("‚ùå ÁºñËæëÂ§±Ë¥•"), err);
            return;
        }
        refreshTable(library_.getAll());
        statusBar()->showMessage(QStringLiteral("‚úÖ ÊàêÂäüÁºñËæëÂõæ‰π¶: %1").arg(dlg.getBook().name), 3000);
    }
}

void MainWindow::onRemove()
{
    // Ê£ÄÊü•ÊùÉÈôê
    if (!adminMode_) {
        QMessageBox::warning(this, QStringLiteral("‚ùå ÊùÉÈôê‰∏çË∂≥"), QStringLiteral("ËØªËÄÖÊ®°ÂºèÊó†Ê≥ïÂà†Èô§Âõæ‰π¶ÔºåËØ∑ÂàáÊç¢Âà∞ÁÆ°ÁêÜÂëòÊ®°Âºè"));
        return;
    }
    
    if (!tableView_) return;
    const auto idx = tableView_->currentIndex();
    if (!idx.isValid()) {
        QMessageBox::information(this, QStringLiteral("‚ÑπÔ∏è ÊèêÁ§∫"), QStringLiteral("ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÂà†Èô§ÁöÑÂõæ‰π¶"));
        return;
    }
    const QString indexId = model_->item(idx.row(), 0)->text();
    const QString bookName = model_->item(idx.row(), 1)->text();
    
    auto reply = QMessageBox::question(this, QStringLiteral("‚ö†Ô∏è Á°ÆËÆ§Âà†Èô§"), 
                                      QStringLiteral("Á°ÆÂÆöË¶ÅÂà†Èô§Âõæ‰π¶ \"%1\" ÂêóÔºü").arg(bookName),
                                      QMessageBox::Yes | QMessageBox::No);
    if (reply == QMessageBox::Yes) {
        if (library_.removeBookByIndexId(indexId)) {
            refreshTable(library_.getAll());
            statusBar()->showMessage(QStringLiteral("‚úÖ ÊàêÂäüÂà†Èô§Âõæ‰π¶: %1").arg(bookName), 3000);
        } else {
            QMessageBox::warning(this, QStringLiteral("‚ùå Âà†Èô§Â§±Ë¥•"), QStringLiteral("Âà†Èô§Âõæ‰π¶Êó∂ÂèëÁîüÈîôËØØ"));
        }
    }
}

void MainWindow::onBorrow()
{
    if (!tableView_) return;
    const auto idx = tableView_->currentIndex();
    if (!idx.isValid()) {
        QMessageBox::information(this, QStringLiteral("‚ÑπÔ∏è ÊèêÁ§∫"), QStringLiteral("ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÂÄüÈòÖÁöÑÂõæ‰π¶"));
        return;
    }
    const QString indexId = model_->item(idx.row(), 0)->text();
    const QString bookName = model_->item(idx.row(), 1)->text();
    
    // Ê£ÄÊü•Âõæ‰π¶ÊòØÂê¶ÂèØÂÄü
    if (model_->item(idx.row(), 9)->text().contains("‚ùå")) {
        QMessageBox::warning(this, QStringLiteral("‚ùå ÂÄü‰π¶Â§±Ë¥•"), QStringLiteral("ËØ•Âõæ‰π¶Â∑≤Ë¢´ÂÄüÂá∫ÔºåÊó†Ê≥ïÂÜçÊ¨°ÂÄüÈòÖ"));
        return;
    }
    
    const QString dueStr = QInputDialog::getText(this, QStringLiteral("üìñ ÂÄü‰π¶"), 
                                                QStringLiteral("ËØ∑ËæìÂÖ•ÂΩíËøòÊó•Êúü (yyyy-MM-dd)\nÂõæ‰π¶: %1").arg(bookName))
            .trimmed();
    if (dueStr.isEmpty()) return;
    
    QDate dueDate = QDate::fromString(dueStr, Qt::ISODate);
    if (!dueDate.isValid()) {
        QMessageBox::warning(this, QStringLiteral("‚ùå Êó•ÊúüÊó†Êïà"), QStringLiteral("ËØ∑Êåâ yyyy-MM-dd Ê†ºÂºèËæìÂÖ•Êó•Êúü"));
        return;
    }
    
    QString err;
    if (!library_.borrowBook(indexId, dueDate, &err)) {
        QMessageBox::warning(this, QStringLiteral("‚ùå ÂÄü‰π¶Â§±Ë¥•"), err);
        return;
    }
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("‚úÖ ÊàêÂäüÂÄüÈòÖÂõæ‰π¶: %1ÔºåÂΩíËøòÊó•Êúü: %2").arg(bookName, dueStr), 3000);
}

void MainWindow::onReturn()
{
    if (!tableView_) return;
    const auto idx = tableView_->currentIndex();
    if (!idx.isValid()) {
        QMessageBox::information(this, QStringLiteral("‚ÑπÔ∏è ÊèêÁ§∫"), QStringLiteral("ËØ∑ÂÖàÈÄâÊã©Ë¶ÅÂΩíËøòÁöÑÂõæ‰π¶"));
        return;
    }
    const QString indexId = model_->item(idx.row(), 0)->text();
    const QString bookName = model_->item(idx.row(), 1)->text();
    
    // Ê£ÄÊü•Âõæ‰π¶ÊòØÂê¶Â∑≤ÂÄüÂá∫
    if (model_->item(idx.row(), 9)->text().contains("‚úÖ")) {
        QMessageBox::warning(this, QStringLiteral("‚ùå Ëøò‰π¶Â§±Ë¥•"), QStringLiteral("ËØ•Âõæ‰π¶Êú™Ë¢´ÂÄüÂá∫ÔºåÊó†ÈúÄÂΩíËøò"));
        return;
    }
    
    auto reply = QMessageBox::question(this, QStringLiteral("üì§ Á°ÆËÆ§Ëøò‰π¶"), 
                                      QStringLiteral("Á°ÆÂÆöË¶ÅÂΩíËøòÂõæ‰π¶ \"%1\" ÂêóÔºü").arg(bookName),
                                      QMessageBox::Yes | QMessageBox::No);
    if (reply == QMessageBox::Yes) {
        QString err;
        if (!library_.returnBook(indexId, &err)) {
            QMessageBox::warning(this, QStringLiteral("‚ùå Ëøò‰π¶Â§±Ë¥•"), err);
            return;
        }
        refreshTable(library_.getAll());
        statusBar()->showMessage(QStringLiteral("‚úÖ ÊàêÂäüÂΩíËøòÂõæ‰π¶: %1").arg(bookName), 3000);
    }
}

void MainWindow::onSearch()
{
    if (!searchEdit_) return;
    
    const QString name = searchEdit_->text().trimmed();
    if (name.isEmpty()) {
        QMessageBox::information(this, QStringLiteral("‚ÑπÔ∏è ÊèêÁ§∫"), QStringLiteral("ËØ∑ËæìÂÖ•Ë¶ÅÊêúÁ¥¢ÁöÑÂõæ‰π¶ÂêçÁß∞"));
        return;
    }
    
    const Book *b = library_.findByName(name);
    if (!b) {
        QMessageBox::information(this, QStringLiteral("‚ÑπÔ∏è Êú™ÊâæÂà∞"), 
                                QStringLiteral("Ê≤°ÊúâÊâæÂà∞ÂêçÁß∞‰∏∫ \"%1\" ÁöÑÂõæ‰π¶").arg(name));
        return;
    }
    refreshTable(QVector<Book>{ *b });
    statusBar()->showMessage(QStringLiteral("üîç ÊêúÁ¥¢Âà∞Âõæ‰π¶: %1").arg(b->name), 3000);
}

void MainWindow::onShowDue()
{
    auto dueBooks = library_.getDueInDays(3);
    refreshTable(dueBooks);
    if (dueBooks.isEmpty()) {
        statusBar()->showMessage(QStringLiteral("‚ÑπÔ∏è Ê≤°Êúâ3Â§©ÂÜÖÂà∞ÊúüÁöÑÂõæ‰π¶"), 3000);
    } else {
        statusBar()->showMessage(QStringLiteral("‚è∞ ÊòæÁ§∫ %1 Êú¨3Â§©ÂÜÖÂà∞ÊúüÁöÑÂõæ‰π¶").arg(dueBooks.size()), 3000);
    }
}

void MainWindow::onSortByBorrow()
{
    library_.sortByBorrowCountDesc();
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("üìä Â∑≤ÊåâÂÄüÈòÖÊ¨°Êï∞ÈôçÂ∫èÊéíÂàó"), 3000);
}

void MainWindow::onOpen()
{
    const QString path = QFileDialog::getOpenFileName(this, QStringLiteral("üìÇ ÊâìÂºÄÊñá‰ª∂"), QString(), 
                                                     QStringLiteral("JSON Êñá‰ª∂ (*.json);;ÊâÄÊúâÊñá‰ª∂ (*.*)"));
    if (path.isEmpty()) return;
    QString err;
    if (!library_.loadFromFile(path, &err)) {
        QMessageBox::warning(this, QStringLiteral("‚ùå ÊâìÂºÄÂ§±Ë¥•"), err);
        return;
    }
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("‚úÖ ÊàêÂäüÊâìÂºÄÊñá‰ª∂: %1").arg(QFileInfo(path).fileName()), 3000);
}

void MainWindow::onSave()
{
    const QString path = QFileDialog::getSaveFileName(this, QStringLiteral("üíæ ‰øùÂ≠òÊñá‰ª∂"), QString(), 
                                                     QStringLiteral("JSON Êñá‰ª∂ (*.json);;ÊâÄÊúâÊñá‰ª∂ (*.*)"));
    if (path.isEmpty()) return;
    QString err;
    if (!library_.saveToFile(path, &err)) {
        QMessageBox::warning(this, QStringLiteral("‚ùå ‰øùÂ≠òÂ§±Ë¥•"), err);
        return;
    }
    statusBar()->showMessage(QStringLiteral("‚úÖ ÊàêÂäü‰øùÂ≠òÊñá‰ª∂: %1").arg(QFileInfo(path).fileName()), 3000);
}

void MainWindow::onShowAll()
{
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("üìã ÊòæÁ§∫ÊâÄÊúâÂõæ‰π¶"), 3000);
}

void MainWindow::setupStyles()
{
    // Â∫îÁî®ÈªòËÆ§‰∏ªÈ¢òÔºàÊµÖËâ≤Ê®°ÂºèÔºâ
    applyTheme(false);
    
    // ËÆæÁΩÆÁ™óÂè£Ê†áÈ¢òÂíåÂõæÊ†á
    setWindowTitle(QStringLiteral("Âõæ‰π¶ÁÆ°ÁêÜÁ≥ªÁªü"));
    setWindowIcon(QIcon(":/icons/library.svg"));
    
    // ËÆæÁΩÆÁä∂ÊÄÅÊ†è
    statusBar()->setMinimumHeight(28);
    updateStatusBar();
}

// Áî®Êà∑Ê®°ÂºèÁÆ°ÁêÜÊñπÊ≥ï
void MainWindow::setUserMode(bool isAdmin)
{
    adminMode_ = isAdmin;
    updateUIForUserMode();
    updateStatusBar();
}

void MainWindow::setCurrentUser(const QString &username)
{
    currentUser_ = username;
    updateStatusBar();
}

bool MainWindow::isAdminMode() const
{
    return adminMode_;
}

QString MainWindow::getCurrentUser() const
{
    return currentUser_;
}

void MainWindow::updateUIForUserMode()
{
    // Ëé∑ÂèñÊâÄÊúâÂ∑•ÂÖ∑Ê†è
    QList<QToolBar*> toolBars = findChildren<QToolBar*>();
    
    for (QToolBar *toolBar : toolBars) {
        // Ëé∑ÂèñÊâÄÊúâÂ∑•ÂÖ∑Ê†èÊåâÈíÆ
        QList<QAction*> actions = toolBar->actions();
        
        // Ê†πÊçÆÁî®Êà∑Ê®°ÂºèÂêØÁî®/Á¶ÅÁî®ÂäüËÉΩ
        for (QAction *action : actions) {
            QString actionText = action->text();
            
            if (adminMode_) {
                // ÁÆ°ÁêÜÂëòÊ®°ÂºèÔºöÂêØÁî®ÊâÄÊúâÂäüËÉΩ
                action->setEnabled(true);
            } else {
                // ËØªËÄÖÊ®°ÂºèÔºöÁ¶ÅÁî®Âà†Èô§ÂíåÁºñËæëÂäüËÉΩ
                if (actionText.contains("üóëÔ∏è Âà†Èô§") || actionText.contains("‚úèÔ∏è ÁºñËæë")) {
                    action->setEnabled(false);
                } else {
                    action->setEnabled(true);
                }
            }
        }
    }
    
    // Êõ¥Êñ∞ËèúÂçïÊ†èÊùÉÈôê
    if (bookMenu_) {
        QList<QAction*> bookActions = bookMenu_->actions();
        for (QAction *action : bookActions) {
            QString actionText = action->text();
            if (adminMode_) {
                action->setEnabled(true);
            } else {
                // ËØªËÄÖÊ®°ÂºèÔºöÁ¶ÅÁî®ÁºñËæëÂíåÂà†Èô§ÂäüËÉΩ
                if (actionText.contains("‚úèÔ∏è ÁºñËæëÂõæ‰π¶") || actionText.contains("üóëÔ∏è Âà†Èô§Âõæ‰π¶")) {
                    action->setEnabled(false);
                } else {
                    action->setEnabled(true);
                }
            }
        }
    }
}

void MainWindow::updateStatusBar()
{
    QString modeText = adminMode_ ? "ÁÆ°ÁêÜÂëòÊ®°Âºè" : "ËØªËÄÖÊ®°Âºè";
    QString userText = currentUser_.isEmpty() ? "Êú™ÁôªÂΩï" : currentUser_;
    QString statusText = QStringLiteral("üë§ Áî®Êà∑: %1 | üîê Ê®°Âºè: %2").arg(userText, modeText);
    statusBar()->showMessage(statusText);
    
    // Á°Æ‰øùÁä∂ÊÄÅÊ†èÊúâË∂≥Â§üÁöÑÈ´òÂ∫¶ÊòæÁ§∫ÂÜÖÂÆπ
    statusBar()->setMinimumHeight(28);
}

void MainWindow::onSwitchMode()
{
    // ÂàáÊç¢Ê®°ÂºèÈúÄË¶ÅÈáçÊñ∞ÁôªÂΩï
    QMessageBox::information(this, "ÂàáÊç¢Ê®°Âºè", "ËØ∑ÈáçÊñ∞ÂêØÂä®Á®ãÂ∫è‰ª•ÂàáÊç¢Áî®Êà∑Ê®°Âºè");
}

QDockWidget* MainWindow::createDockWidgetFromScrollArea(QScrollArea *scrollArea)
{
    QDockWidget *dockWidget = new QDockWidget("ÂäüËÉΩÊ†è", this);
    dockWidget->setWidget(scrollArea);
    dockWidget->setFeatures(QDockWidget::NoDockWidgetFeatures);  // Á¶ÅÁî®ÂÅúÈù†ÂäüËÉΩ
    dockWidget->setTitleBarWidget(new QWidget());  // ÈöêËóèÊ†áÈ¢òÊ†è
    dockWidget->setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
    
    // ÂÅúÈù†Á™óÂè£Ê†∑ÂºèÁî±‰∏ªÈ¢òÁ≥ªÁªüÊéßÂà∂
    
    return dockWidget;
}

void MainWindow::setupSearchBar()
{
    // ÂàõÂª∫ÊêúÁ¥¢Ê°ÜÂÆπÂô®
    QWidget *searchWidget = new QWidget();
    QHBoxLayout *searchLayout = new QHBoxLayout(searchWidget);
    searchLayout->setContentsMargins(16, 8, 16, 8);
    searchLayout->setSpacing(8);
    
    // ÂàõÂª∫ÊêúÁ¥¢ËæìÂÖ•Ê°Ü
    searchEdit_ = new QLineEdit();
    searchEdit_->setPlaceholderText("üîç ÊêúÁ¥¢Âõæ‰π¶ÂêçÁß∞...");
    
    // ÂàõÂª∫ÊêúÁ¥¢ÊåâÈíÆ
    searchButton_ = new QPushButton("ÊêúÁ¥¢");
    
    // ÂàõÂª∫‰∏ªÈ¢òÂàáÊç¢ÊåâÈíÆ
    themeToggleButton_ = new QPushButton("üåô");
    themeToggleButton_->setToolTip("ÂàáÊç¢Ê∑±ÊµÖËâ≤Ê®°Âºè");
    
    // Ê∑ªÂä†Âà∞Â∏ÉÂ±Ä
    searchLayout->addWidget(searchEdit_);
    searchLayout->addWidget(searchButton_);
    searchLayout->addWidget(themeToggleButton_);
    
    // Â∞ÜÊêúÁ¥¢Ê†èÊ∑ªÂä†Âà∞È°∂ÈÉ®Â∑•ÂÖ∑Ê†è
    QToolBar *searchToolBar = addToolBar("ÊêúÁ¥¢");
    searchToolBar->setMovable(false);
    searchToolBar->setFloatable(false);
    searchToolBar->addWidget(searchWidget);
    searchToolBar->setAllowedAreas(Qt::TopToolBarArea);
    
    // ÊêúÁ¥¢Â∑•ÂÖ∑Ê†èÊ†∑ÂºèÁî±‰∏ªÈ¢òÁ≥ªÁªüÊéßÂà∂
    
    // ËøûÊé•‰ø°Âè∑
    connect(searchButton_, &QPushButton::clicked, this, &MainWindow::onSearch);
    connect(searchEdit_, &QLineEdit::returnPressed, this, &MainWindow::onSearch);
    connect(themeToggleButton_, &QPushButton::clicked, this, &MainWindow::toggleTheme);
}

void MainWindow::setupThemeToggle()
{
    // ÂàùÂßãÂåñ‰∏ªÈ¢òÁä∂ÊÄÅÔºàÈªòËÆ§‰∏∫ÊµÖËâ≤Ê®°ÂºèÔºâ
    isDarkMode_ = false;
}

void MainWindow::toggleTheme()
{
    isDarkMode_ = !isDarkMode_;
    applyTheme(isDarkMode_);
    
    // Êõ¥Êñ∞ÊåâÈíÆÂõæÊ†á
    if (themeToggleButton_) {
        themeToggleButton_->setText(isDarkMode_ ? "‚òÄÔ∏è" : "üåô");
        themeToggleButton_->setToolTip(isDarkMode_ ? "ÂàáÊç¢Âà∞ÊµÖËâ≤Ê®°Âºè" : "ÂàáÊç¢Âà∞Ê∑±Ëâ≤Ê®°Âºè");
    }
}

void MainWindow::applyTheme(bool isDark)
{
    QString styles = getThemeStyles(isDark);
    setStyleSheet(styles);
}

QString MainWindow::getThemeStyles(bool isDark)
{
    if (isDark) {
        // Ê∑±Ëâ≤‰∏ªÈ¢òÊ†∑Âºè
        return QStringLiteral(
            "QMainWindow {"
            "    background-color: #1C1C1E;"
            "    color: #FFFFFF;"
            "    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;"
            "}"
            "QToolBar {"
            "    background-color: #2C2C2E;"
            "    border: none;"
            "    border-right: 1px solid #3A3A3C;"
            "    border-bottom: 1px solid #3A3A3C;"
            "    spacing: 8px;"
            "    padding: 12px 8px;"
            "}"
            "QToolButton {"
            "    background-color: #3A3A3C;"
            "    color: #FFFFFF;"
            "    border: 1px solid #48484A;"
            "    border-radius: 12px;"
            "    padding: 10px 6px;"
            "    margin: 2px;"
            "    font-size: 13px;"
            "    font-weight: 600;"
            "    min-width: 110px;"
            "    min-height: 45px;"
            "    max-width: 150px;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "    text-align: center;"
            "}"
            "QToolButton:hover {"
            "    background-color: #48484A;"
            "    border-color: #007AFF;"
            "    color: #007AFF;"
            "}"
            "QToolButton:pressed {"
            "    background-color: #007AFF;"
            "    color: #FFFFFF;"
            "    border-color: #0051D5;"
            "}"
            "QToolButton:disabled {"
            "    background-color: #2C2C2E;"
            "    color: #8E8E93;"
            "    border-color: #3A3A3C;"
            "}"
            "QStatusBar {"
            "    background-color: #2C2C2E;"
            "    color: #8E8E93;"
            "    border-top: 1px solid #3A3A3C;"
            "    padding: 6px 16px;"
            "    font-size: 14px;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "    min-height: 28px;"
            "    height: 28px;"
            "    line-height: 1.4;"
            "}"
            "QTableView {"
            "    background-color: #1C1C1E;"
            "    alternate-background-color: #2C2C2E;"
            "    selection-background-color: #007AFF;"
            "    selection-color: #FFFFFF;"
            "    gridline-color: #3A3A3C;"
            "    border: 1px solid #3A3A3C;"
            "    border-radius: 12px;"
            "    gridline-width: 1px;"
            "    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;"
            "}"
            "QTableView::item {"
            "    padding: 12px 16px;"
            "    border: none;"
            "    min-height: 44px;"
            "    font-size: 15px;"
            "    color: #FFFFFF;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "}"
            "QTableView::item:selected {"
            "    background-color: #007AFF;"
            "    color: #FFFFFF;"
            "}"
            "QTableView::item:hover {"
            "    background-color: #2C2C2E;"
            "}"
            "QHeaderView::section {"
            "    background-color: #2C2C2E;"
            "    color: #FFFFFF;"
            "    padding: 16px 12px;"
            "    border: none;"
            "    font-weight: 600;"
            "    font-size: 15px;"
            "    min-height: 44px;"
            "    border-bottom: 1px solid #3A3A3C;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "}"
            "QHeaderView::section:hover {"
            "    background-color: #3A3A3C;"
            "}"
            "QLineEdit {"
            "    background-color: #3A3A3C;"
            "    border: 2px solid #48484A;"
            "    border-radius: 20px;"
            "    padding: 8px 16px;"
            "    font-size: 14px;"
            "    color: #FFFFFF;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "    min-height: 20px;"
            "}"
            "QLineEdit:focus {"
            "    border-color: #007AFF;"
            "    background-color: #48484A;"
            "}"
            "QLineEdit:hover {"
            "    border-color: #5A5A5C;"
            "}"
            "QPushButton {"
            "    background-color: #007AFF;"
            "    color: #FFFFFF;"
            "    border: none;"
            "    border-radius: 20px;"
            "    padding: 8px 20px;"
            "    font-size: 14px;"
            "    font-weight: 600;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "    min-width: 60px;"
            "    min-height: 20px;"
            "}"
            "QPushButton:hover {"
            "    background-color: #0051D5;"
            "}"
            "QPushButton:pressed {"
            "    background-color: #0041B8;"
            "}"
            "QDockWidget {"
            "    background-color: #2C2C2E;"
            "    border: none;"
            "    border-right: 1px solid #3A3A3C;"
            "}"
            "QScrollArea {"
            "    background-color: #2C2C2E;"
            "    border: none;"
            "}"
            "QScrollBar:vertical {"
            "    background-color: #3A3A3C;"
            "    width: 8px;"
            "    border-radius: 4px;"
            "}"
            "QScrollBar::handle:vertical {"
            "    background-color: #5A5A5C;"
            "    border-radius: 4px;"
            "    min-height: 20px;"
            "}"
            "QScrollBar::handle:vertical:hover {"
            "    background-color: #6A6A6C;"
            "}"
        );
    } else {
        // ÊµÖËâ≤‰∏ªÈ¢òÊ†∑Âºè
        return QStringLiteral(
            "QMainWindow {"
            "    background-color: #F2F2F7;"
            "    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;"
            "}"
            "QToolBar {"
            "    background-color: #F2F2F7;"
            "    border: none;"
            "    border-right: 1px solid #E5E5EA;"
            "    border-bottom: 1px solid #E5E5EA;"
            "    spacing: 8px;"
            "    padding: 12px 8px;"
            "}"
            "QToolButton {"
            "    background-color: #FFFFFF;"
            "    border: 1px solid #E5E5EA;"
            "    border-radius: 12px;"
            "    padding: 10px 6px;"
            "    margin: 2px;"
            "    font-size: 13px;"
            "    font-weight: 600;"
            "    color: #1C1C1E;"
            "    min-width: 110px;"
            "    min-height: 45px;"
            "    max-width: 150px;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "    text-align: center;"
            "}"
            "QToolButton:hover {"
            "    background-color: #F2F2F7;"
            "    border-color: #007AFF;"
            "    color: #007AFF;"
            "}"
            "QToolButton:pressed {"
            "    background-color: #007AFF;"
            "    color: #FFFFFF;"
            "    border-color: #0051D5;"
            "}"
            "QToolButton:disabled {"
            "    background-color: #F2F2F7;"
            "    color: #8E8E93;"
            "    border-color: #E5E5EA;"
            "}"
            "QStatusBar {"
            "    background-color: #F2F2F7;"
            "    color: #8E8E93;"
            "    border-top: 1px solid #E5E5EA;"
            "    padding: 6px 16px;"
            "    font-size: 14px;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "    min-height: 28px;"
            "    height: 28px;"
            "    line-height: 1.4;"
            "}"
            "QTableView {"
            "    background-color: #FFFFFF;"
            "    alternate-background-color: #F8F9FA;"
            "    selection-background-color: #007AFF;"
            "    selection-color: #FFFFFF;"
            "    gridline-color: #E5E5EA;"
            "    border: 1px solid #E5E5EA;"
            "    border-radius: 12px;"
            "    gridline-width: 1px;"
            "    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;"
            "}"
            "QTableView::item {"
            "    padding: 12px 16px;"
            "    border: none;"
            "    min-height: 44px;"
            "    font-size: 15px;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "}"
            "QTableView::item:selected {"
            "    background-color: #007AFF;"
            "    color: #FFFFFF;"
            "}"
            "QTableView::item:hover {"
            "    background-color: #F2F2F7;"
            "}"
            "QHeaderView::section {"
            "    background-color: #F8F9FA;"
            "    color: #1C1C1E;"
            "    padding: 16px 12px;"
            "    border: none;"
            "    font-weight: 600;"
            "    font-size: 15px;"
            "    min-height: 44px;"
            "    border-bottom: 1px solid #E5E5EA;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "}"
            "QHeaderView::section:hover {"
            "    background-color: #F2F2F7;"
            "}"
            "QLineEdit {"
            "    background-color: #FFFFFF;"
            "    border: 2px solid #E5E5EA;"
            "    border-radius: 20px;"
            "    padding: 8px 16px;"
            "    font-size: 14px;"
            "    color: #1C1C1E;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "    min-height: 20px;"
            "}"
            "QLineEdit:focus {"
            "    border-color: #007AFF;"
            "    background-color: #FFFFFF;"
            "}"
            "QLineEdit:hover {"
            "    border-color: #C7C7CC;"
            "}"
            "QPushButton {"
            "    background-color: #007AFF;"
            "    color: #FFFFFF;"
            "    border: none;"
            "    border-radius: 20px;"
            "    padding: 8px 20px;"
            "    font-size: 14px;"
            "    font-weight: 600;"
            "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
            "    min-width: 60px;"
            "    min-height: 20px;"
            "}"
            "QPushButton:hover {"
            "    background-color: #0051D5;"
            "}"
            "QPushButton:pressed {"
            "    background-color: #0041B8;"
            "}"
            "QDockWidget {"
            "    background-color: #F2F2F7;"
            "    border: none;"
            "    border-right: 1px solid #E5E5EA;"
            "}"
            "QScrollArea {"
            "    background-color: #F2F2F7;"
            "    border: none;"
            "}"
            "QScrollBar:vertical {"
            "    background-color: #E5E5EA;"
            "    width: 8px;"
            "    border-radius: 4px;"
            "}"
            "QScrollBar::handle:vertical {"
            "    background-color: #C7C7CC;"
            "    border-radius: 4px;"
            "    min-height: 20px;"
            "}"
            "QScrollBar::handle:vertical:hover {"
            "    background-color: #AEAEB2;"
            "}"
        );
    }
}

void MainWindow::initializeSampleBooks()
{
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÊúâÂõæ‰π¶Êï∞ÊçÆÔºåÂ¶ÇÊûúÊúâÂàô‰∏çÊ∑ªÂä†Á§∫‰æãÊï∞ÊçÆ
    if (!library_.getAll().isEmpty()) {
        return;
    }
    
    // ÂàõÂª∫Á§∫‰æãÂõæ‰π¶Êï∞ÊçÆ
    QVector<Book> sampleBooks = {
        // ËÆ°ÁÆóÊú∫Á±ªÂõæ‰π¶
        Book{"CS001", "C++Á®ãÂ∫èËÆæËÆ°ÊïôÁ®ã", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ËÆ°ÁÆóÊú∫ÁßëÂ≠¶", 5, 45.80, QDate(2023, 1, 15), QDate(), 12, true},
        Book{"CS002", "Êï∞ÊçÆÁªìÊûÑ‰∏éÁÆóÊ≥ïÂàÜÊûê", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ËÆ°ÁÆóÊú∫ÁßëÂ≠¶", 3, 68.50, QDate(2023, 2, 20), QDate(), 8, true},
        Book{"CS003", "Êìç‰ΩúÁ≥ªÁªüÊ¶ÇÂøµ", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ËÆ°ÁÆóÊú∫ÁßëÂ≠¶", 4, 89.00, QDate(2023, 3, 10), QDate(), 15, true},
        Book{"CS004", "ËÆ°ÁÆóÊú∫ÁΩëÁªú", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ËÆ°ÁÆóÊú∫ÁßëÂ≠¶", 6, 76.20, QDate(2023, 1, 25), QDate(), 9, true},
        Book{"CS005", "Êï∞ÊçÆÂ∫ìÁ≥ªÁªüÊ¶ÇËÆ∫", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ËÆ°ÁÆóÊú∫ÁßëÂ≠¶", 2, 92.50, QDate(2023, 4, 5), QDate(), 6, true},
        
        // ÊñáÂ≠¶Á±ªÂõæ‰π¶
        Book{"LIT001", "Á∫¢Ê•ºÊ¢¶", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ÊñáÂ≠¶", 8, 35.60, QDate(2023, 1, 10), QDate(), 25, true},
        Book{"LIT002", "ÁôæÂπ¥Â≠§Áã¨", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ÊñáÂ≠¶", 4, 42.80, QDate(2023, 2, 15), QDate(), 18, true},
        Book{"LIT003", "Ê¥ªÁùÄ", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ÊñáÂ≠¶", 6, 28.90, QDate(2023, 3, 1), QDate(), 22, true},
        Book{"LIT004", "Âπ≥Âá°ÁöÑ‰∏ñÁïå", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ÊñáÂ≠¶", 5, 55.00, QDate(2023, 1, 20), QDate(), 16, true},
        Book{"LIT005", "Âõ¥Âüé", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ÊñáÂ≠¶", 3, 38.50, QDate(2023, 2, 28), QDate(), 14, true},
        
        // ÂéÜÂè≤Á±ªÂõæ‰π¶
        Book{"HIS001", "‰∏≠ÂõΩÈÄöÂè≤", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ÂéÜÂè≤", 4, 78.00, QDate(2023, 1, 5), QDate(), 11, true},
        Book{"HIS002", "‰∏ñÁïåÊñáÊòéÂè≤", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ÂéÜÂè≤", 3, 85.50, QDate(2023, 3, 15), QDate(), 7, true},
        Book{"HIS003", "ÊòéÊúùÈÇ£‰∫õ‰∫ãÂÑø", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ÂéÜÂè≤", 6, 48.80, QDate(2023, 2, 10), QDate(), 20, true},
        Book{"HIS004", "‰∫∫Á±ªÁÆÄÂè≤", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ÂéÜÂè≤", 5, 65.20, QDate(2023, 4, 1), QDate(), 13, true},
        
        // ÁßëÂ≠¶Á±ªÂõæ‰π¶
        Book{"SCI001", "Êó∂Èó¥ÁÆÄÂè≤", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ÁßëÂ≠¶", 3, 52.00, QDate(2023, 1, 30), QDate(), 9, true},
        Book{"SCI002", "Áâ©ÁßçËµ∑Ê∫ê", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ÁßëÂ≠¶", 2, 68.80, QDate(2023, 3, 20), QDate(), 5, true},
        Book{"SCI003", "Áõ∏ÂØπËÆ∫", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ÁßëÂ≠¶", 1, 75.50, QDate(2023, 2, 25), QDate(), 3, true},
        Book{"SCI004", "ÈáèÂ≠êÂäõÂ≠¶ÂéüÁêÜ", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ÁßëÂ≠¶", 2, 88.00, QDate(2023, 4, 10), QDate(), 4, true},
        
        // Â§ñËØ≠Á±ªÂõæ‰π¶
        Book{"ENG001", "Êñ∞Ê¶ÇÂøµËã±ËØ≠", "‰ªôÊûóÂõæ‰π¶È¶Ü", "Â§ñËØ≠", 10, 32.50, QDate(2023, 1, 12), QDate(), 35, true},
        Book{"ENG002", "ÊâòÁ¶èËØçÊ±áÁ≤æÈÄâ", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "Â§ñËØ≠", 8, 45.80, QDate(2023, 2, 18), QDate(), 28, true},
        Book{"ENG003", "ÈõÖÊÄùËÄÉËØïÊåáÂçó", "‰ªôÊûóÂõæ‰π¶È¶Ü", "Â§ñËØ≠", 6, 58.20, QDate(2023, 3, 8), QDate(), 19, true},
        Book{"ENG004", "ÂïÜÂä°Ëã±ËØ≠", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "Â§ñËØ≠", 4, 42.00, QDate(2023, 1, 28), QDate(), 12, true},
        
        // Ëâ∫ÊúØÁ±ªÂõæ‰π¶
        Book{"ART001", "Ë•øÊñπÁæéÊúØÂè≤", "‰ªôÊûóÂõæ‰π¶È¶Ü", "Ëâ∫ÊúØ", 3, 72.50, QDate(2023, 2, 5), QDate(), 8, true},
        Book{"ART002", "‰∏≠ÂõΩ‰π¶Ê≥ïËâ∫ÊúØ", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "Ëâ∫ÊúØ", 2, 55.80, QDate(2023, 3, 12), QDate(), 6, true},
        Book{"ART003", "Èü≥‰πêÁêÜËÆ∫Âü∫Á°Ä", "‰ªôÊûóÂõæ‰π¶È¶Ü", "Ëâ∫ÊúØ", 4, 48.00, QDate(2023, 1, 18), QDate(), 10, true},
        
        // Âì≤Â≠¶Á±ªÂõæ‰π¶
        Book{"PHI001", "ËÆ∫ËØ≠", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "Âì≤Â≠¶", 5, 25.80, QDate(2023, 1, 8), QDate(), 17, true},
        Book{"PHI002", "ÈÅìÂæ∑Áªè", "‰ªôÊûóÂõæ‰π¶È¶Ü", "Âì≤Â≠¶", 4, 22.50, QDate(2023, 2, 22), QDate(), 14, true},
        Book{"PHI003", "ËãèËè≤ÁöÑ‰∏ñÁïå", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "Âì≤Â≠¶", 3, 38.80, QDate(2023, 3, 25), QDate(), 11, true},
        
        // ‰∏Ä‰∫õÂ∑≤ÂÄüÂá∫ÁöÑÂõæ‰π¶
        Book{"CS006", "‰∫∫Â∑•Êô∫ËÉΩÂØºËÆ∫", "‰ªôÊûóÂõæ‰π¶È¶Ü", "ËÆ°ÁÆóÊú∫ÁßëÂ≠¶", 2, 95.00, QDate(2023, 4, 15), QDate(2024, 1, 15), 3, false},
        Book{"LIT006", "1984", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ÊñáÂ≠¶", 3, 36.50, QDate(2023, 2, 8), QDate(2024, 1, 20), 7, false},
        Book{"ENG005", "Ëã±ËØ≠ËØ≠Ê≥ïÂ§ßÂÖ®", "‰ªôÊûóÂõæ‰π¶È¶Ü", "Â§ñËØ≠", 5, 52.80, QDate(2023, 3, 18), QDate(2024, 1, 25), 9, false},
        Book{"SCI005", "ÂÆáÂÆôÁöÑÂ••Áßò", "‰∏âÁâåÊ•ºÂõæ‰π¶È¶Ü", "ÁßëÂ≠¶", 2, 68.00, QDate(2023, 1, 22), QDate(2024, 1, 30), 5, false}
    };
    
    // Ê∑ªÂä†Á§∫‰æãÂõæ‰π¶Âà∞Âõæ‰π¶È¶Ü
    for (const Book &book : sampleBooks) {
        QString error;
        library_.addBook(book, &error);
    }
    
    // Âà∑Êñ∞Ë°®Ê†ºÊòæÁ§∫
    refreshTable(library_.getAll());
    
    // Êõ¥Êñ∞Áä∂ÊÄÅÊ†è
    statusBar()->showMessage(QStringLiteral("üìö Â∑≤Âä†ËΩΩ %1 Êú¨Á§∫‰æãÂõæ‰π¶").arg(sampleBooks.size()), 3000);
}

void MainWindow::setupMenuBar()
{
    // ÂàõÂª∫ËèúÂçïÊ†è
    menuBar_ = menuBar();
    menuBar_->setStyleSheet(
        "QMenuBar {"
        "    background-color: #F8F9FA;"
        "    color: #1C1C1E;"
        "    border-bottom: 1px solid #E5E5EA;"
        "    font-size: 14px;"
        "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
        "    padding: 4px 8px;"
        "}"
        "QMenuBar::item {"
        "    background-color: transparent;"
        "    padding: 6px 12px;"
        "    border-radius: 6px;"
        "    margin: 2px;"
        "}"
        "QMenuBar::item:selected {"
        "    background-color: #E5E5EA;"
        "    color: #007AFF;"
        "}"
        "QMenuBar::item:pressed {"
        "    background-color: #D1D1D6;"
        "}"
        "QMenu {"
        "    background-color: #FFFFFF;"
        "    border: 1px solid #E5E5EA;"
        "    border-radius: 8px;"
        "    padding: 4px;"
        "    font-size: 14px;"
        "    font-family: 'Microsoft YaHei UI', 'PingFang SC', 'Hiragino Sans GB', 'WenQuanYi Micro Hei', sans-serif;"
        "}"
        "QMenu::item {"
        "    padding: 8px 16px;"
        "    border-radius: 4px;"
        "    margin: 1px;"
        "    min-width: 120px;"
        "}"
        "QMenu::item:selected {"
        "    background-color: #007AFF;"
        "    color: #FFFFFF;"
        "}"
        "QMenu::separator {"
        "    height: 1px;"
        "    background-color: #E5E5EA;"
        "    margin: 4px 8px;"
        "}"
    );
    
    // 1. Âõæ‰π¶ÁÆ°ÁêÜËèúÂçï
    bookMenu_ = menuBar_->addMenu("üìö Âõæ‰π¶ÁÆ°ÁêÜ");
    
    QAction *addBookAction = bookMenu_->addAction("üìñ Êñ∞Â¢ûÂõæ‰π¶");
    QAction *editBookAction = bookMenu_->addAction("‚úèÔ∏è ÁºñËæëÂõæ‰π¶");
    QAction *deleteBookAction = bookMenu_->addAction("üóëÔ∏è Âà†Èô§Âõæ‰π¶");
    bookMenu_->addSeparator();
    QAction *borrowBookAction = bookMenu_->addAction("üìñ ÂÄüÈòÖÂõæ‰π¶");
    QAction *returnBookAction = bookMenu_->addAction("üì§ ÂΩíËøòÂõæ‰π¶");
    bookMenu_->addSeparator();
    QAction *showAllAction = bookMenu_->addAction("üìã ÊòæÁ§∫ÂÖ®ÈÉ®");
    
    // ËøûÊé•‰ø°Âè∑
    connect(addBookAction, &QAction::triggered, this, &MainWindow::onAdd);
    connect(editBookAction, &QAction::triggered, this, &MainWindow::onEdit);
    connect(deleteBookAction, &QAction::triggered, this, &MainWindow::onRemove);
    connect(borrowBookAction, &QAction::triggered, this, &MainWindow::onBorrow);
    connect(returnBookAction, &QAction::triggered, this, &MainWindow::onReturn);
    connect(showAllAction, &QAction::triggered, this, &MainWindow::onShowAll);
    
    // 2. Êü•ËØ¢Á≠õÈÄâËèúÂçï
    queryMenu_ = menuBar_->addMenu("üîç Êü•ËØ¢Á≠õÈÄâ");
    
    QAction *searchAction = queryMenu_->addAction("üîç ÊêúÁ¥¢Âõæ‰π¶");
    QAction *filterCategoryAction = queryMenu_->addAction("üìÇ ÊåâÂàÜÁ±ªÁ≠õÈÄâ");
    QAction *filterLocationAction = queryMenu_->addAction("üìç Êåâ‰ΩçÁΩÆÁ≠õÈÄâ");
    queryMenu_->addSeparator();
    QAction *showAvailableAction = queryMenu_->addAction("‚úÖ ÂèØÂÄüÂõæ‰π¶");
    QAction *showBorrowedAction = queryMenu_->addAction("üìñ Â∑≤ÂÄüÂõæ‰π¶");
    QAction *showTopBorrowedAction = queryMenu_->addAction("üî• ÁÉ≠Èó®Âõæ‰π¶");
    QAction *showRecentAction = queryMenu_->addAction("üÜï ÊúÄÊñ∞Âõæ‰π¶");
    queryMenu_->addSeparator();
    QAction *showExpensiveAction = queryMenu_->addAction("üí∞ È´ò‰ª∑Âõæ‰π¶");
    QAction *showCheapAction = queryMenu_->addAction("üí∏ ‰Ωé‰ª∑Âõæ‰π¶");
    QAction *showDueAction = queryMenu_->addAction("‚è∞ Âà∞ÊúüÊèêÈÜí");
    queryMenu_->addSeparator();
    QAction *advancedSearchAction = queryMenu_->addAction("üîç È´òÁ∫ßÊêúÁ¥¢");
    
    // ËøûÊé•‰ø°Âè∑
    connect(searchAction, &QAction::triggered, this, &MainWindow::onSearch);
    connect(filterCategoryAction, &QAction::triggered, this, &MainWindow::onFilterByCategory);
    connect(filterLocationAction, &QAction::triggered, this, &MainWindow::onFilterByLocation);
    connect(showAvailableAction, &QAction::triggered, this, &MainWindow::onShowAvailable);
    connect(showBorrowedAction, &QAction::triggered, this, &MainWindow::onShowBorrowed);
    connect(showTopBorrowedAction, &QAction::triggered, this, &MainWindow::onShowTopBorrowed);
    connect(showRecentAction, &QAction::triggered, this, &MainWindow::onShowRecentlyAdded);
    connect(showExpensiveAction, &QAction::triggered, this, &MainWindow::onShowExpensiveBooks);
    connect(showCheapAction, &QAction::triggered, this, &MainWindow::onShowCheapBooks);
    connect(showDueAction, &QAction::triggered, this, &MainWindow::onShowDue);
    connect(advancedSearchAction, &QAction::triggered, this, &MainWindow::onAdvancedSearch);
    
    // 3. ÊéíÂ∫èÂäüËÉΩËèúÂçï
    sortMenu_ = menuBar_->addMenu("üìä ÊéíÂ∫èÂäüËÉΩ");
    
    QAction *sortByNameAction = sortMenu_->addAction("üî§ ÊåâÂêçÁß∞ÊéíÂ∫è");
    QAction *sortByCategoryAction = sortMenu_->addAction("üìö ÊåâÂàÜÁ±ªÊéíÂ∫è");
    QAction *sortByLocationAction = sortMenu_->addAction("üìç Êåâ‰ΩçÁΩÆÊéíÂ∫è");
    QAction *sortByPriceAction = sortMenu_->addAction("üíµ Êåâ‰ª∑Ê†ºÊéíÂ∫è");
    QAction *sortByDateAction = sortMenu_->addAction("üìÖ ÊåâÊó•ÊúüÊéíÂ∫è");
    QAction *sortByBorrowAction = sortMenu_->addAction("üìà ÊåâÂÄüÈòÖÊéíÂ∫è");
    
    // ËøûÊé•‰ø°Âè∑
    connect(sortByNameAction, &QAction::triggered, this, &MainWindow::onSortByName);
    connect(sortByCategoryAction, &QAction::triggered, this, &MainWindow::onSortByCategory);
    connect(sortByLocationAction, &QAction::triggered, this, &MainWindow::onSortByLocation);
    connect(sortByPriceAction, &QAction::triggered, this, &MainWindow::onSortByPrice);
    connect(sortByDateAction, &QAction::triggered, this, &MainWindow::onSortByDate);
    connect(sortByBorrowAction, &QAction::triggered, this, &MainWindow::onSortByBorrowCount);
    
    // 4. Êï∞ÊçÆÁÆ°ÁêÜËèúÂçï
    dataMenu_ = menuBar_->addMenu("üíæ Êï∞ÊçÆÁÆ°ÁêÜ");
    
    QAction *openFileAction = dataMenu_->addAction("üìÇ ÊâìÂºÄÊñá‰ª∂");
    QAction *saveFileAction = dataMenu_->addAction("üíæ ‰øùÂ≠òÊñá‰ª∂");
    dataMenu_->addSeparator();
    QAction *exportDataAction = dataMenu_->addAction("üì§ ÂØºÂá∫Êï∞ÊçÆ");
    QAction *importDataAction = dataMenu_->addAction("üì• ÂØºÂÖ•Êï∞ÊçÆ");
    dataMenu_->addSeparator();
    QAction *backupDataAction = dataMenu_->addAction("üíæ Â§á‰ªΩÊï∞ÊçÆ");
    QAction *restoreDataAction = dataMenu_->addAction("üîÑ ÊÅ¢Â§çÊï∞ÊçÆ");
    dataMenu_->addSeparator();
    QAction *statisticsAction = dataMenu_->addAction("üìä ÁªüËÆ°‰ø°ÊÅØ");
    
    // ËøûÊé•‰ø°Âè∑
    connect(openFileAction, &QAction::triggered, this, &MainWindow::onOpen);
    connect(saveFileAction, &QAction::triggered, this, &MainWindow::onSave);
    connect(exportDataAction, &QAction::triggered, this, &MainWindow::onExportData);
    connect(importDataAction, &QAction::triggered, this, &MainWindow::onImportData);
    connect(backupDataAction, &QAction::triggered, this, &MainWindow::onBackupData);
    connect(restoreDataAction, &QAction::triggered, this, &MainWindow::onRestoreData);
    connect(statisticsAction, &QAction::triggered, this, &MainWindow::onShowStatistics);
    
    // 5. Á≥ªÁªüËÆæÁΩÆËèúÂçï
    systemMenu_ = menuBar_->addMenu("‚öôÔ∏è Á≥ªÁªüËÆæÁΩÆ");
    
    QAction *switchModeAction = systemMenu_->addAction("üîÑ ÂàáÊç¢Ê®°Âºè");
    QAction *toggleThemeAction = systemMenu_->addAction("üåô ÂàáÊç¢‰∏ªÈ¢ò");
    systemMenu_->addSeparator();
    QAction *aboutAction = systemMenu_->addAction("‚ÑπÔ∏è ÂÖ≥‰∫éÁ≥ªÁªü");
    
    // ËøûÊé•‰ø°Âè∑
    connect(switchModeAction, &QAction::triggered, this, &MainWindow::onSwitchMode);
    connect(toggleThemeAction, &QAction::triggered, this, &MainWindow::toggleTheme);
    connect(aboutAction, &QAction::triggered, this, [this]() {
        QMessageBox::about(this, "ÂÖ≥‰∫éÂõæ‰π¶ÁÆ°ÁêÜÁ≥ªÁªü", 
                          "üìö Âõæ‰π¶ÁÆ°ÁêÜÁ≥ªÁªü v2.0\n\n"
                          "ÂäüËÉΩÁâπÁÇπÔºö\n"
                          "‚Ä¢ ÂÆåÊï¥ÁöÑÂõæ‰π¶ÁÆ°ÁêÜÂäüËÉΩ\n"
                          "‚Ä¢ Êô∫ËÉΩÊü•ËØ¢ÂíåÁ≠õÈÄâ\n"
                          "‚Ä¢ Â§öÁßçÊéíÂ∫èÊñπÂºè\n"
                          "‚Ä¢ Êï∞ÊçÆÂØºÂÖ•ÂØºÂá∫\n"
                          "‚Ä¢ ÁªüËÆ°Êä•Ë°®ÂäüËÉΩ\n"
                          "‚Ä¢ Ê∑±Ëâ≤/ÊµÖËâ≤‰∏ªÈ¢ò\n\n"
                          "ËÆæËÆ°ËÄÖÔºöÊàøÁùøÔºåÂº†ÈÇµÂ•ïÔºåËåÖÂ§ßÈ∏ø\n"
                          "Âçó‰∫¨ÈÇÆÁîµÂ§ßÂ≠¶");
    });
}

// Êñ∞Â¢ûÂÆûÁî®ÂäüËÉΩÂÆûÁé∞
void MainWindow::onFilterByCategory()
{
    QStringList categories;
    QVector<Book> allBooks = library_.getAll();
    QSet<QString> uniqueCategories;
    
    for (const Book &book : allBooks) {
        uniqueCategories.insert(book.category);
    }
    
    for (const QString &category : uniqueCategories) {
        categories << category;
    }
    categories.sort();
    
    bool ok;
    QString category = QInputDialog::getItem(this, QStringLiteral("üìÇ ÊåâÂàÜÁ±ªÁ≠õÈÄâ"), 
                                            QStringLiteral("ËØ∑ÈÄâÊã©Ë¶ÅÁ≠õÈÄâÁöÑÂàÜÁ±ª:"), 
                                            categories, 0, false, &ok);
    if (ok && !category.isEmpty()) {
        QVector<Book> filteredBooks = library_.getByCategory(category);
        refreshTable(filteredBooks);
        statusBar()->showMessage(QStringLiteral("üìÇ ÊòæÁ§∫ÂàÜÁ±ª '%1' ÁöÑÂõæ‰π¶ÔºåÂÖ± %2 Êú¨").arg(category).arg(filteredBooks.size()), 3000);
    }
}

void MainWindow::onFilterByLocation()
{
    QStringList locations;
    QVector<Book> allBooks = library_.getAll();
    QSet<QString> uniqueLocations;
    
    for (const Book &book : allBooks) {
        uniqueLocations.insert(book.location);
    }
    
    for (const QString &location : uniqueLocations) {
        locations << location;
    }
    locations.sort();
    
    bool ok;
    QString location = QInputDialog::getItem(this, QStringLiteral("üìç Êåâ‰ΩçÁΩÆÁ≠õÈÄâ"), 
                                            QStringLiteral("ËØ∑ÈÄâÊã©Ë¶ÅÁ≠õÈÄâÁöÑ‰ΩçÁΩÆ:"), 
                                            locations, 0, false, &ok);
    if (ok && !location.isEmpty()) {
        QVector<Book> filteredBooks = library_.getByLocation(location);
        refreshTable(filteredBooks);
        statusBar()->showMessage(QStringLiteral("üìç ÊòæÁ§∫‰ΩçÁΩÆ '%1' ÁöÑÂõæ‰π¶ÔºåÂÖ± %2 Êú¨").arg(location).arg(filteredBooks.size()), 3000);
    }
}

void MainWindow::onShowAvailable()
{
    QVector<Book> availableBooks = library_.getAvailable();
    refreshTable(availableBooks);
    statusBar()->showMessage(QStringLiteral("‚úÖ ÊòæÁ§∫ÂèØÂÄüÂõæ‰π¶ÔºåÂÖ± %1 Êú¨").arg(availableBooks.size()), 3000);
}

void MainWindow::onShowBorrowed()
{
    QVector<Book> borrowedBooks = library_.getBorrowed();
    refreshTable(borrowedBooks);
    statusBar()->showMessage(QStringLiteral("üìñ ÊòæÁ§∫Â∑≤ÂÄüÂõæ‰π¶ÔºåÂÖ± %1 Êú¨").arg(borrowedBooks.size()), 3000);
}

void MainWindow::onShowTopBorrowed()
{
    QVector<Book> topBooks = library_.getTopBorrowed(10);
    refreshTable(topBooks);
    statusBar()->showMessage(QStringLiteral("üî• ÊòæÁ§∫ÁÉ≠Èó®Âõæ‰π¶Ââç10ÂêçÔºåÂÖ± %1 Êú¨").arg(topBooks.size()), 3000);
}

void MainWindow::onShowRecentlyAdded()
{
    QVector<Book> recentBooks = library_.getRecentlyAdded(30);
    refreshTable(recentBooks);
    statusBar()->showMessage(QStringLiteral("üÜï ÊòæÁ§∫ÊúÄËøë30Â§©Êñ∞Â¢ûÂõæ‰π¶ÔºåÂÖ± %1 Êú¨").arg(recentBooks.size()), 3000);
}

void MainWindow::onShowExpensiveBooks()
{
    bool ok;
    double minPrice = QInputDialog::getDouble(this, QStringLiteral("üí∞ È´ò‰ª∑Âõæ‰π¶Á≠õÈÄâ"), 
                                            QStringLiteral("ËØ∑ËæìÂÖ•ÊúÄ‰Ωé‰ª∑Ê†º:"), 50.0, 0.0, 10000.0, 2, &ok);
    if (ok) {
        QVector<Book> expensiveBooks = library_.getExpensiveBooks(minPrice);
        refreshTable(expensiveBooks);
        statusBar()->showMessage(QStringLiteral("üí∞ ÊòæÁ§∫‰ª∑Ê†º ‚â• %1 ÂÖÉÁöÑÂõæ‰π¶ÔºåÂÖ± %2 Êú¨").arg(minPrice).arg(expensiveBooks.size()), 3000);
    }
}

void MainWindow::onShowCheapBooks()
{
    bool ok;
    double maxPrice = QInputDialog::getDouble(this, QStringLiteral("üí∏ ‰Ωé‰ª∑Âõæ‰π¶Á≠õÈÄâ"), 
                                            QStringLiteral("ËØ∑ËæìÂÖ•ÊúÄÈ´ò‰ª∑Ê†º:"), 30.0, 0.0, 10000.0, 2, &ok);
    if (ok) {
        QVector<Book> cheapBooks = library_.getCheapBooks(maxPrice);
        refreshTable(cheapBooks);
        statusBar()->showMessage(QStringLiteral("üí∏ ÊòæÁ§∫‰ª∑Ê†º ‚â§ %1 ÂÖÉÁöÑÂõæ‰π¶ÔºåÂÖ± %2 Êú¨").arg(maxPrice).arg(cheapBooks.size()), 3000);
    }
}

void MainWindow::onShowStatistics()
{
    int totalBooks = library_.getTotalBooks();
    int availableBooks = library_.getAvailableBooks();
    int borrowedBooks = library_.getBorrowedBooks();
    double totalValue = library_.getTotalValue();
    QString mostPopularCategory = library_.getMostPopularCategory();
    QString mostPopularLocation = library_.getMostPopularLocation();
    
    QString stats = QStringLiteral(
        "üìä Âõæ‰π¶ÁªüËÆ°‰ø°ÊÅØ\n\n"
        "üìö ÊÄªÂõæ‰π¶Êï∞Èáè: %1 Êú¨\n"
        "‚úÖ ÂèØÂÄüÂõæ‰π¶: %2 Êú¨\n"
        "üìñ Â∑≤ÂÄüÂõæ‰π¶: %3 Êú¨\n"
        "üí∞ Âõæ‰π¶ÊÄª‰ª∑ÂÄº: %4 ÂÖÉ\n"
        "üèÜ ÊúÄÁÉ≠Èó®ÂàÜÁ±ª: %5\n"
        "üìç ÊúÄÁÉ≠Èó®‰ΩçÁΩÆ: %6\n"
        "üìà ÂÄüÈòÖÁéá: %7%"
    ).arg(totalBooks)
     .arg(availableBooks)
     .arg(borrowedBooks)
     .arg(QString::number(totalValue, 'f', 2))
     .arg(mostPopularCategory)
     .arg(mostPopularLocation)
     .arg(totalBooks > 0 ? QString::number((double)borrowedBooks / totalBooks * 100, 'f', 1) : "0");
    
    QMessageBox::information(this, QStringLiteral("üìä ÁªüËÆ°‰ø°ÊÅØ"), stats);
}

void MainWindow::onSortByName()
{
    library_.sortByName();
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("üî§ Â∑≤ÊåâÂêçÁß∞ÊéíÂ∫è"), 3000);
}

void MainWindow::onSortByCategory()
{
    library_.sortByCategory();
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("üìö Â∑≤ÊåâÂàÜÁ±ªÊéíÂ∫è"), 3000);
}

void MainWindow::onSortByLocation()
{
    library_.sortByLocation();
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("üìç Â∑≤Êåâ‰ΩçÁΩÆÊéíÂ∫è"), 3000);
}

void MainWindow::onSortByPrice()
{
    library_.sortByPrice();
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("üíµ Â∑≤Êåâ‰ª∑Ê†ºÊéíÂ∫èÔºàÈ´òÂà∞‰ΩéÔºâ"), 3000);
}

void MainWindow::onSortByDate()
{
    library_.sortByDate();
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("üìÖ Â∑≤ÊåâÂÖ•Â∫ìÊó•ÊúüÊéíÂ∫èÔºàÊñ∞Âà∞ÊóßÔºâ"), 3000);
}

void MainWindow::onSortByBorrowCount()
{
    library_.sortByBorrowCount();
    refreshTable(library_.getAll());
    statusBar()->showMessage(QStringLiteral("üìà Â∑≤ÊåâÂÄüÈòÖÊ¨°Êï∞ÊéíÂ∫èÔºàÈ´òÂà∞‰ΩéÔºâ"), 3000);
}

void MainWindow::onAdvancedSearch()
{
    bool ok;
    QString keyword = QInputDialog::getText(this, QStringLiteral("üîç È´òÁ∫ßÊêúÁ¥¢"), 
                                           QStringLiteral("ËØ∑ËæìÂÖ•ÊêúÁ¥¢ÂÖ≥ÈîÆËØçÔºàÊîØÊåÅ‰π¶Âêç„ÄÅÂàÜÁ±ª„ÄÅ‰ΩçÁΩÆ„ÄÅÁ¥¢ÂºïÂè∑Ôºâ:"), 
                                           QLineEdit::Normal, "", &ok);
    if (ok && !keyword.trimmed().isEmpty()) {
        QVector<Book> searchResults = library_.searchBooks(keyword.trimmed());
        refreshTable(searchResults);
        statusBar()->showMessage(QStringLiteral("üîç ÊêúÁ¥¢Âà∞ %1 Êú¨Áõ∏ÂÖ≥Âõæ‰π¶").arg(searchResults.size()), 3000);
    }
}

void MainWindow::onExportData()
{
    const QString path = QFileDialog::getSaveFileName(this, QStringLiteral("üì§ ÂØºÂá∫Êï∞ÊçÆ"), 
                                                     QStringLiteral("library_export.json"), 
                                                     QStringLiteral("JSON Êñá‰ª∂ (*.json);;ÊâÄÊúâÊñá‰ª∂ (*.*)"));
    if (!path.isEmpty()) {
        QString err;
        if (library_.saveToFile(path, &err)) {
            statusBar()->showMessage(QStringLiteral("‚úÖ Êï∞ÊçÆÂØºÂá∫ÊàêÂäü: %1").arg(QFileInfo(path).fileName()), 3000);
        } else {
            QMessageBox::warning(this, QStringLiteral("‚ùå ÂØºÂá∫Â§±Ë¥•"), err);
        }
    }
}

void MainWindow::onImportData()
{
    const QString path = QFileDialog::getOpenFileName(this, QStringLiteral("üì• ÂØºÂÖ•Êï∞ÊçÆ"), QString(), 
                                                     QStringLiteral("JSON Êñá‰ª∂ (*.json);;ÊâÄÊúâÊñá‰ª∂ (*.*)"));
    if (!path.isEmpty()) {
        QString err;
        if (library_.loadFromFile(path, &err)) {
            refreshTable(library_.getAll());
            statusBar()->showMessage(QStringLiteral("‚úÖ Êï∞ÊçÆÂØºÂÖ•ÊàêÂäü: %1").arg(QFileInfo(path).fileName()), 3000);
        } else {
            QMessageBox::warning(this, QStringLiteral("‚ùå ÂØºÂÖ•Â§±Ë¥•"), err);
        }
    }
}

void MainWindow::onBackupData()
{
    QString timestamp = QDateTime::currentDateTime().toString("yyyyMMdd_hhmmss");
    QString backupPath = QStringLiteral("backup_%1.json").arg(timestamp);
    
    QString err;
    if (library_.saveToFile(backupPath, &err)) {
        statusBar()->showMessage(QStringLiteral("üíæ Êï∞ÊçÆÂ§á‰ªΩÊàêÂäü: %1").arg(backupPath), 3000);
    } else {
        QMessageBox::warning(this, QStringLiteral("‚ùå Â§á‰ªΩÂ§±Ë¥•"), err);
    }
}

void MainWindow::onRestoreData()
{
    const QString path = QFileDialog::getOpenFileName(this, QStringLiteral("üîÑ ÊÅ¢Â§çÊï∞ÊçÆ"), QString(), 
                                                     QStringLiteral("JSON Êñá‰ª∂ (*.json);;ÊâÄÊúâÊñá‰ª∂ (*.*)"));
    if (!path.isEmpty()) {
        auto reply = QMessageBox::question(this, QStringLiteral("‚ö†Ô∏è Á°ÆËÆ§ÊÅ¢Â§ç"), 
                                          QStringLiteral("Á°ÆÂÆöË¶ÅÊÅ¢Â§çÊï∞ÊçÆÂêóÔºüËøôÂ∞ÜË¶ÜÁõñÂΩìÂâçÊâÄÊúâÊï∞ÊçÆÔºÅ"),
                                          QMessageBox::Yes | QMessageBox::No);
        if (reply == QMessageBox::Yes) {
            QString err;
            if (library_.loadFromFile(path, &err)) {
                refreshTable(library_.getAll());
                statusBar()->showMessage(QStringLiteral("‚úÖ Êï∞ÊçÆÊÅ¢Â§çÊàêÂäü: %1").arg(QFileInfo(path).fileName()), 3000);
            } else {
                QMessageBox::warning(this, QStringLiteral("‚ùå ÊÅ¢Â§çÂ§±Ë¥•"), err);
            }
        }
    }
}
